{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","features/tasks-reducer.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/todolist-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/TodoList/Task/Task.tsx","features/TodolistsList/TodoList/TodoList.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","components/Error404/Error404.tsx","app/App.tsx","app/store.ts","index.tsx","components/Error404/Error404.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","ResultCodeResponse","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","todolistId","title","put","post","delete","taskId","model","authAPI","loginData","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","setTaskEntityStatusAC","status","type","updateTaskTC","getState","task","tasks","find","t","id","startDate","priority","description","deadline","then","res","resultCode","Succeed","updateTaskAC","catch","e","isLoggedIn","setIsLoggedInAC","isInitialized","setIsInitializedAppAC","setTodolistsAC","todolists","setTodoEntityStatusAC","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trim","Grid","spacing","container","TextField","disabled","margin","variant","value","helperText","label","onChange","currentTarget","onKeyPress","key","IconButton","color","onClick","AddBox","EditableSpan","editTitle","entityStatus","editMode","setEditMode","setValue","addItemTitle","currentValue","CircularProgress","size","autoFocus","onBlur","shiftKey","Box","component","m","p","style","textDecoration","Completed","wordBreak","onDoubleClick","Task","entityTaskStatus","removeTask","changeTaskStatus","changeTaskTitle","onCheckedHandler","useCallback","checked","New","deleteTask","newTitle","minWidth","maxWidth","display","justifyContent","Checkbox","Delete","TodoList","filter","changeTodolistTitle","deleteTodolist","demo","useSelector","state","useDispatch","useEffect","setTasksAC","items","removeTaskAC","deleteTaskTC","addTask","item","addTaskTC","action","changeFilter","changeTodolistFilterAC","editTodolistTitle","allTodolistTasks","tasksForTodoList","textAlign","Button","map","v","TodolistsList","auth","addTodolist","console","log","todolist","postTodolistTC","removeTodolistAC","deleteTodolistTC","changeTodolistTitleAC","updateTodolistTC","padding","tl","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","userLoginData","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","getFieldProps","touched","FormControlLabel","control","Error404","className","s","number","text","smile","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","App","logout","AppBar","position","Toolbar","right","LinearProgress","Container","fixed","exact","path","render","from","top","width","rootReducer","combineReducers","todo","todoListId","copy","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.9dc2791e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios'\r\nimport { RequestStatusType } from '../app/app-reducer'\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n  withCredentials: true,\r\n  headers: {\r\n    'api-key': '17966628-b354-4868-a658-bbe1d663b656',\r\n  },\r\n})\r\n\r\n// api\r\nexport const todolistAPI = {\r\n  getTodolist() {\r\n    return instance.get<TodolistType[]>('todo-lists')\r\n  },\r\n  updateTodolist(todolistId: string, title: string) {\r\n    return instance.put<CommonResponseType<{}>>(`todo-lists/${todolistId}`,\r\n      {title: title})\r\n  },\r\n  createTodolist(title: string) {\r\n    return instance.post<CommonResponseType<{ item: TodoType }>>(`todo-lists`, {title: title})\r\n  },\r\n  deleteTodolist(todolistId: string) {\r\n    return instance.delete<CommonResponseType<{}>>(`todo-lists/${todolistId}`)\r\n  },\r\n  getTasks(todolistId: string) {\r\n    return instance.get<ResponseTasksType>(`todo-lists/${todolistId}/tasks`)\r\n  },\r\n  createTask(todolistId: string, title: string) {\r\n    return instance.post<CommonResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`,\r\n      {title: title})\r\n  },\r\n  updateTask(todolistId: string, taskId: string, model: ModelUpdateTaskType) {\r\n    return instance.put<CommonResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`,\r\n      model)\r\n  },\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    return instance.delete<CommonResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n  },\r\n}\r\n\r\nexport const authAPI = {\r\n  login(loginData: LoginParamsType) {\r\n    return instance.post<CommonResponseType<{ userId: number }>>('auth/login', loginData)\r\n  },\r\n  logout() {\r\n    return instance.delete<CommonResponseType<{}>>('auth/login')\r\n  },\r\n  me() {\r\n    return instance.get<CommonResponseType<{ id: number, email: string, login: string }>>('auth/me')\r\n  },\r\n}\r\n\r\n\r\n// types\r\nexport type CommonResponseType<T> = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  data: T,\r\n  fieldsErrors: string[]\r\n}\r\ntype ResponseTasksType = {\r\n  items: TaskType[]\r\n  totalCount: number\r\n  error: string\r\n}\r\nexport type TodoType = {\r\n  id: string\r\n  addedDate: string\r\n  order: number\r\n  title: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n  New,\r\n  InProgress,\r\n  Completed,\r\n  Draft\r\n}\r\n\r\nexport enum TaskPriorities {\r\n  Low,\r\n  Middle,\r\n  High,\r\n  Urgently,\r\n  Later\r\n}\r\n\r\n// enum for server response resultcode\r\nexport enum ResultCodeResponse {\r\n  Succeed,\r\n  Failed,\r\n}\r\n\r\nexport type TaskType = {\r\n  id: string\r\n  title: string\r\n  status: TaskStatuses\r\n  priority: TaskPriorities\r\n  description: string\r\n  completed: boolean\r\n  startDate: string\r\n  deadline: string\r\n  todoListId: string\r\n  order: number\r\n  addedDate: string\r\n  entityTaskStatus: RequestStatusType\r\n}\r\nexport type DomainModelUpdateTaskType = {\r\n  title: string\r\n  startDate: string\r\n  priority: TaskPriorities\r\n  description: string\r\n  deadline: string\r\n  status: TaskStatuses\r\n}\r\nexport type ModelUpdateTaskType = {\r\n  title?: string\r\n  startDate?: string\r\n  priority?: TaskPriorities\r\n  description?: string\r\n  deadline?: string\r\n  status?: TaskStatuses\r\n}\r\nexport type TodolistType = TodoType & {\r\n  filter: FilterType\r\n  entityStatus: RequestStatusType\r\n}\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\nexport type LoginParamsType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha?: boolean\r\n}\r\n","import { setAppErrorAC, setAppStatusAC } from '../app/app-reducer'\r\nimport { Dispatch } from 'redux'\r\nimport { CommonResponseType } from '../api/todolist-api'\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: CommonResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n  if (data.messages.length) {\r\n    dispatch(setAppErrorAC(data.messages[0]))\r\n  } else {\r\n    dispatch(setAppErrorAC('Some error occurred'))\r\n  }\r\n  dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError =\r\n  (error: { message: string }, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n  }\r\n\r\ntype ErrorUtilsDispatchType =\r\n  Dispatch<ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>>","import { ModelUpdateTaskType, ResultCodeResponse, TaskType, todolistAPI } from '../api/todolist-api'\r\nimport { Dispatch } from 'redux'\r\nimport { RootStateType } from '../app/store'\r\nimport { addTodolistAC, removeTodolistAC, setTodoEntityStatusAC, setTodolistsAC } from './todolist-reducer'\r\nimport { RequestStatusType, setAppErrorAC, setAppStatusAC } from '../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../utils/error-utils'\r\n\r\nconst initialState: TasksListType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TasksListType => {\r\n  switch (action.type) {\r\n    case 'SET_TASKS':\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: action.tasks.map(\r\n          t => ({...t, entityTaskStatus: 'idle'})),\r\n      }\r\n    case 'ADD_TASK':\r\n      return {\r\n        ...state,\r\n        [action.task.todoListId]:\r\n          [{...action.task}, ...state[action.task.todoListId]],\r\n      }\r\n    case 'REMOVE_TASK':\r\n      return {\r\n        ...state,\r\n        [action.todolistId]:\r\n          state[action.todolistId].filter(t => t.id !== action.taskId),\r\n      }\r\n    case 'DELETE_ALL_TASKS':\r\n      return {}\r\n    case 'UPDATE_TASK':\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\r\n          ...t,\r\n          ...action.model,\r\n        } : t),\r\n      }\r\n    case 'SET_TASK_ENTITY_STATUS':\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: [...state[action.todolistId].map(\r\n          t => t.id === action.taskId ? {...t, entityTaskStatus: action.status} : t)],\r\n      }\r\n    case 'SET_TODOLISTS': {\r\n      const copy = {...state}\r\n      action.todolists.forEach((tl) => {\r\n        copy[tl.id] = []\r\n      })\r\n      return copy\r\n    }\r\n    case 'ADD_TODOLIST':\r\n      return {\r\n        ...state,\r\n        [action.todolist.id]: [],\r\n      }\r\n    case 'REMOVE_TODOLIST':\r\n      const copy = {...state}\r\n      delete copy[action.id]\r\n      return copy\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// Action Creators\r\nexport const setTasksAC = (tasks: TaskType[], todolistId: string) => ({type: 'SET_TASKS', tasks, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD_TASK', task} as const)\r\nexport const deleteAllTasksAC = () => ({type: 'DELETE_ALL_TASKS'} as const)\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n  ({type: 'REMOVE_TASK', taskId, todolistId} as const)\r\nexport const updateTaskAC = (todolistId: string, taskId: string, model: ModelUpdateTaskType) =>\r\n  ({type: 'UPDATE_TASK', todolistId, taskId, model} as const)\r\nexport const setTaskEntityStatusAC = (todolistId: string, taskId: string, status: RequestStatusType) => ({\r\n  type: 'SET_TASK_ENTITY_STATUS', todolistId, taskId, status,\r\n} as const)\r\n\r\n\r\n// Thunk Creators\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  todolistAPI.getTasks(todolistId).then(res => {\r\n    if (!res.data.error) {\r\n      dispatch(setTasksAC(res.data.items, todolistId))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    } else {\r\n      dispatch(setAppErrorAC(res.data.error))\r\n      dispatch(setAppStatusAC('failed'))\r\n    }\r\n  }).catch((e) => handleServerNetworkError(e, dispatch))\r\n}\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  dispatch(setTodoEntityStatusAC(todolistId, 'loading'))\r\n  todolistAPI.createTask(todolistId, title).then(res => {\r\n    if (res.data.resultCode === ResultCodeResponse.Succeed) {\r\n      dispatch(addTaskAC(res.data.data.item))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n      dispatch(setTodoEntityStatusAC(todolistId, 'succeeded'))\r\n    } else {\r\n      handleServerAppError(res.data, dispatch)\r\n      dispatch(setTodoEntityStatusAC(todolistId, 'failed'))\r\n    }\r\n  }).catch((e) => {\r\n    handleServerNetworkError(e, dispatch)\r\n    dispatch(setTodoEntityStatusAC(todolistId, 'failed'))\r\n  })\r\n}\r\nexport const deleteTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  dispatch(setTaskEntityStatusAC(todolistId, taskId, 'loading'))\r\n  todolistAPI.deleteTask(todolistId, taskId).then((res) => {\r\n      if (res.data.resultCode === ResultCodeResponse.Succeed) {\r\n        dispatch(removeTaskAC(taskId, todolistId))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n        dispatch(setTaskEntityStatusAC(todolistId, taskId, 'succeeded'))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch((e) => {\r\n      handleServerNetworkError(e, dispatch)\r\n      dispatch(setTaskEntityStatusAC(todolistId, taskId, 'failed'))\r\n    })\r\n}\r\nexport const updateTaskTC = (todolistId: string, taskId: string, model: ModelUpdateTaskType) =>\r\n  (dispatch: Dispatch<ActionsType>, getState: () => RootStateType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(setTaskEntityStatusAC(todolistId, taskId, 'loading'))\r\n    const allTasksFromState = getState().tasks\r\n    const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n    const task = tasksForCurrentTodolist.find(t => t.id === taskId)\r\n    \r\n    if (task) {\r\n      todolistAPI.updateTask(todolistId, taskId, {\r\n        title: task.title,\r\n        startDate: task.startDate,\r\n        priority: task.priority,\r\n        description: task.description,\r\n        deadline: task.deadline,\r\n        status: task.status,\r\n        ...model,\r\n        \r\n      }).then((res) => {\r\n        if (res.data.resultCode === ResultCodeResponse.Succeed) {\r\n          dispatch(updateTaskAC(todolistId, taskId, model))\r\n          dispatch(setAppStatusAC('succeeded'))\r\n          dispatch(setTaskEntityStatusAC(todolistId, taskId, 'succeeded'))\r\n        } else {\r\n          handleServerAppError(res.data, dispatch)\r\n          dispatch(setTaskEntityStatusAC(todolistId, taskId, 'failed'))\r\n        }\r\n      }).catch((e) => {\r\n        handleServerNetworkError(e, dispatch)\r\n        dispatch(setTaskEntityStatusAC(todolistId, taskId, 'failed'))\r\n      })\r\n    }\r\n  }\r\n\r\n// types\r\nexport type TasksListType = {\r\n  [key: string]: TaskType[]\r\n}\r\ntype ActionsType =\r\n  | ReturnType<typeof setTodolistsAC>\r\n  | ReturnType<typeof addTodolistAC>\r\n  | ReturnType<typeof removeTodolistAC>\r\n  | ReturnType<typeof setTasksAC>\r\n  | ReturnType<typeof addTaskAC>\r\n  | ReturnType<typeof updateTaskAC>\r\n  | ReturnType<typeof removeTaskAC>\r\n  | ReturnType<typeof deleteAllTasksAC>\r\n  | ReturnType<typeof setAppStatusAC>\r\n  | ReturnType<typeof setAppErrorAC>\r\n  | ReturnType<typeof setTaskEntityStatusAC>\r\n  | ReturnType<typeof setTodoEntityStatusAC>\r\n","import { Dispatch } from 'redux'\r\nimport { authAPI, LoginParamsType, ResultCodeResponse } from '../../api/todolist-api'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\nimport { setAppErrorAC, setAppStatusAC, setIsInitializedAppAC } from '../../app/app-reducer'\r\nimport { setTodolistsAC } from '../todolist-reducer'\r\nimport { deleteAllTasksAC } from '../tasks-reducer'\r\n\r\nconst initialState = {\r\n  isLoggedIn: false,\r\n}\r\n\r\nexport type InitialAuthStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialAuthStateType = initialState, action: ActionTypes): InitialAuthStateType => {\r\n  switch (action.type) {\r\n    case 'AUTH/SET_IS_LOGGED_IN':\r\n      return {\r\n        ...state,\r\n        isLoggedIn: action.isLoggedIn,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const setIsLoggedInAC = (isLoggedIn: boolean) => ({type: 'AUTH/SET_IS_LOGGED_IN', isLoggedIn} as const)\r\n\r\n// thunks\r\nexport const loginUserTC = (userLoginData: LoginParamsType) => (dispatch: Dispatch<ActionTypes>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  dispatch(setIsInitializedAppAC(false))\r\n  authAPI.login(userLoginData).then(res => {\r\n    if (res.data.resultCode === ResultCodeResponse.Succeed) {\r\n      dispatch(setIsLoggedInAC(true))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n      dispatch(setIsInitializedAppAC(true))\r\n    } else {\r\n      dispatch(setIsInitializedAppAC(true))\r\n      handleServerAppError(res.data, dispatch)\r\n    }\r\n  }).catch(e => {\r\n    dispatch(setIsInitializedAppAC(true))\r\n    handleServerNetworkError(e, dispatch)\r\n  })\r\n}\r\nexport const logoutUserTC = () => (dispatch: Dispatch<ActionTypes>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  authAPI.logout().then(res => {\r\n    if (res.data.resultCode === ResultCodeResponse.Succeed) {\r\n      dispatch(setIsLoggedInAC(false))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n      \r\n      dispatch(deleteAllTasksAC())\r\n      dispatch(setTodolistsAC([]))\r\n    } else {\r\n      handleServerAppError(res.data, dispatch)\r\n    }\r\n  }).catch(e => handleServerNetworkError(e, dispatch))\r\n}\r\n\r\n// types\r\ntype ActionTypes = ReturnType<typeof setIsLoggedInAC\r\n  | typeof setAppErrorAC\r\n  | typeof setAppStatusAC\r\n  | typeof setIsInitializedAppAC\r\n  | typeof deleteAllTasksAC\r\n  | typeof setTodolistsAC>","import { Dispatch } from 'redux'\r\nimport { authAPI, ResultCodeResponse } from '../api/todolist-api'\r\nimport { setIsLoggedInAC } from '../features/Login/auth-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../utils/error-utils'\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n  isInitialized: false as boolean,\r\n  status: 'idle' as RequestStatusType,\r\n  error: null as string | null,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'APP/SET-STATUS':\r\n      return {...state, status: action.status}\r\n    case 'APP/SET-APP-IS-INITIALIZED':\r\n      return {...state, isInitialized: action.isInitialized}\r\n    case 'APP/SET-ERROR':\r\n      return {...state, error: action.error}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setIsInitializedAppAC = (isInitialized: boolean) =>\r\n  ({type: 'APP/SET-APP-IS-INITIALIZED', isInitialized} as const)\r\n\r\nexport const setAppInitializedTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  authAPI.me().then(res => {\r\n    if (res.data.resultCode === ResultCodeResponse.Succeed) {\r\n      dispatch(setIsLoggedInAC(true))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    } else {\r\n      handleServerAppError(res.data, dispatch)\r\n    }\r\n    dispatch(setIsInitializedAppAC(true))\r\n  }).catch(e => handleServerNetworkError(e, dispatch))\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setAppStatusAC>\r\n  | ReturnType<typeof setAppErrorAC>\r\n  | ReturnType<typeof setIsLoggedInAC>\r\n  | ReturnType<typeof setIsInitializedAppAC>","import { FilterType, ResultCodeResponse, todolistAPI, TodolistType, TodoType } from '../api/todolist-api'\r\nimport { Dispatch } from 'redux'\r\nimport { RequestStatusType, setAppErrorAC, setAppStatusAC } from '../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../utils/error-utils'\r\n\r\nconst initialState: TodolistType[] = []\r\n\r\nexport const todolistReducer = (state = initialState, action: ActionsType): TodolistType[] => {\r\n  switch (action.type) {\r\n    case 'SET_TODOLISTS':\r\n      return action.todolists.map(todo => ({...todo, filter: 'all', entityStatus: 'idle'}))\r\n    case 'ADD_TODOLIST':\r\n      return [\r\n        {...action.todolist, filter: 'all', entityStatus: 'idle'},\r\n        ...state,\r\n      ]\r\n    case 'REMOVE_TODOLIST':\r\n      return [...state.filter(tl => tl.id !== action.id)]\r\n    case 'CHANGE_TODOLIST_TITLE':\r\n      return [\r\n        ...state.map(\r\n          tl => tl.id === action.id\r\n            ?\r\n            {\r\n              ...tl,\r\n              title: action.title,\r\n            }\r\n            : tl,\r\n        ),\r\n      ]\r\n    case 'CHANGE_TODOLIST_FILTER':\r\n      return [\r\n        ...state.map(\r\n          tl => tl.id === action.id\r\n            ?\r\n            {\r\n              ...tl,\r\n              filter: action.filter,\r\n            }\r\n            : tl,\r\n        ),\r\n      ]\r\n    case 'SET_ENTITY_STATUS':\r\n      return [...state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)]\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// Action Creators\r\nexport const addTodolistAC = (todolist: TodoType) => ({type: 'ADD_TODOLIST', todolist} as const)\r\nexport const removeTodolistAC = (todolistId: string) => ({type: 'REMOVE_TODOLIST', id: todolistId} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) =>\r\n  ({type: 'CHANGE_TODOLIST_TITLE', title, id} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterType) =>\r\n  ({type: 'CHANGE_TODOLIST_FILTER', filter, id} as const)\r\nexport const setTodolistsAC = (todolists: TodoType[]) => ({type: 'SET_TODOLISTS', todolists} as const)\r\nexport const setTodoEntityStatusAC = (id: string, status: RequestStatusType) =>\r\n  ({type: 'SET_ENTITY_STATUS', id, status} as const)\r\n\r\n// Thunk Creators\r\nexport const fetchTodolistTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  todolistAPI.getTodolist().then(res => {\r\n    dispatch(setTodolistsAC(res.data))\r\n    dispatch(setAppStatusAC('succeeded'))\r\n  }).catch((e) => {\r\n    handleServerNetworkError(e, dispatch)\r\n  })\r\n}\r\nexport const postTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  todolistAPI.createTodolist(title).then(res => {\r\n    console.log(res)\r\n    if (res.data.resultCode === ResultCodeResponse.Succeed) {\r\n      dispatch(addTodolistAC(res.data.data.item))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    } else {\r\n      handleServerAppError(res.data, dispatch)\r\n    }\r\n  }).catch((e) => handleServerNetworkError(e, dispatch))\r\n}\r\nexport const deleteTodolistTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  dispatch(setTodoEntityStatusAC(todolistId, 'loading'))\r\n  todolistAPI.deleteTodolist(todolistId).then(res => {\r\n    if (res.data.resultCode === ResultCodeResponse.Succeed) {\r\n      dispatch(removeTodolistAC(todolistId))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    } else {\r\n      handleServerAppError(res.data, dispatch)\r\n      dispatch(setTodoEntityStatusAC(todolistId, 'failed'))\r\n    }\r\n  }).catch((e) => {\r\n    handleServerNetworkError(e, dispatch)\r\n    dispatch(setTodoEntityStatusAC(todolistId, 'failed'))\r\n  })\r\n}\r\nexport const updateTodolistTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  dispatch(setTodoEntityStatusAC(todolistId, 'loading'))\r\n  todolistAPI.updateTodolist(todolistId, title).then(res => {\r\n    if (res.data.resultCode === ResultCodeResponse.Succeed) {\r\n      dispatch(changeTodolistTitleAC(todolistId, title))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n      dispatch(setTodoEntityStatusAC(todolistId, 'succeeded'))\r\n    } else {\r\n      handleServerAppError(res.data, dispatch)\r\n      dispatch(setTodoEntityStatusAC(todolistId, 'failed'))\r\n    }\r\n  }).catch((e) => {\r\n    handleServerNetworkError(e, dispatch)\r\n    dispatch(setTodoEntityStatusAC(todolistId, 'failed'))\r\n  })\r\n}\r\n\r\n// types\r\ntype ActionsType =\r\n  | ReturnType<typeof setTodolistsAC>\r\n  | ReturnType<typeof removeTodolistAC>\r\n  | ReturnType<typeof addTodolistAC>\r\n  | ReturnType<typeof changeTodolistTitleAC>\r\n  | ReturnType<typeof changeTodolistFilterAC>\r\n  | ReturnType<typeof setAppStatusAC>\r\n  | ReturnType<typeof setAppErrorAC>\r\n  | ReturnType<typeof setTodoEntityStatusAC>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react'\r\nimport { Grid, IconButton, TextField } from '@material-ui/core'\r\nimport { AddBox } from '@material-ui/icons'\r\n\r\n\r\nexport type AddItemFormType = {\r\n  addItem: (title: string) => void\r\n  title?: string\r\n  disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormType) => {\r\n  const [title, setTitle] = useState<string>('')\r\n  const [error, setError] = useState<string | null>(null)\r\n  \r\n  const addItem = () => {\r\n    if (title.trim()) {\r\n      props.addItem(title)\r\n      setTitle('')\r\n    } else {\r\n      setError('Title is required!')\r\n      setTitle('')\r\n    }\r\n  }\r\n  \r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n    if (error !== null) {\r\n      setError(null)\r\n    }\r\n  }\r\n  \r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      addItem()\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <Grid spacing={2}>\r\n      <Grid container>\r\n        <TextField\r\n          disabled={props.disabled}\r\n          margin={'dense'}\r\n          variant={'outlined'}\r\n          value={title}\r\n          error={!!error}\r\n          helperText={error}\r\n          label={props.title}\r\n          onChange={onChangeHandler}\r\n          onKeyPress={onKeyPressHandler}\r\n        />\r\n        <IconButton color={'primary'} onClick={addItem} disabled={props.disabled}>\r\n          <AddBox/>\r\n        </IconButton>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n})","import React, { ChangeEvent, KeyboardEvent, useState } from 'react'\r\nimport { Box, CircularProgress, TextField } from '@material-ui/core'\r\nimport { TaskStatuses } from '../../api/todolist-api'\r\nimport { RequestStatusType } from '../../app/app-reducer'\r\n\r\nexport type EditableSpanType = {\r\n  title: string\r\n  editTitle: (newTitle: string) => void\r\n  status?: TaskStatuses\r\n  disabled?: boolean\r\n  entityStatus?: RequestStatusType\r\n}\r\nexport const EditableSpan = React.memo((\r\n  {title, editTitle, status, disabled, entityStatus}: EditableSpanType) => {\r\n  const [editMode, setEditMode] = useState(false)\r\n  const [value, setValue] = useState('')\r\n  const [error, setError] = useState<string | null>(null)\r\n  \r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setValue(e.currentTarget.value)\r\n    if (error !== null) {\r\n      setError(null)\r\n    }\r\n  }\r\n  \r\n  const editModeHandler = () => {\r\n    !disabled && setEditMode(true)\r\n  }\r\n  \r\n  const addItemTitle = (currentValue: string) => {\r\n    if (currentValue.trim()) {\r\n      editTitle(currentValue)\r\n      setEditMode(false)\r\n    } else {\r\n      setError('Title is required!')\r\n      setValue('')\r\n    }\r\n  }\r\n  \r\n  const addItemOnBlur = () => {\r\n    addItemTitle(value)\r\n  }\r\n  \r\n  const onEnterEditItemTitle = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      addItemTitle(value)\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      {entityStatus === 'loading' ? <CircularProgress size={20}/> :\r\n        editMode ?\r\n          <TextField\r\n            autoFocus\r\n            value={value}\r\n            error={!!error}\r\n            helperText={error}\r\n            onChange={onChangeHandler}\r\n            onBlur={addItemOnBlur}\r\n            onKeyPress={onEnterEditItemTitle}\r\n          />\r\n          : <Box\r\n            component={'span'}\r\n            m={1}\r\n            p={1}\r\n            style={{\r\n              textDecoration: `${status === TaskStatuses.Completed ? 'line-through' : ''}`,\r\n              wordBreak: 'break-word',\r\n            }}\r\n            onDoubleClick={editModeHandler}\r\n          >\r\n            {title}\r\n          </Box>\r\n        \r\n      }\r\n    </>\r\n  )\r\n})\r\n\r\n\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { Checkbox, Grid, IconButton } from '@material-ui/core'\r\nimport { TaskStatuses } from '../../../../api/todolist-api'\r\nimport { RequestStatusType } from '../../../../app/app-reducer'\r\n\r\nexport type TaskPropsType = {\r\n  title: string\r\n  key: string\r\n  id: string\r\n  status: TaskStatuses\r\n  entityStatus?: RequestStatusType\r\n  entityTaskStatus?: RequestStatusType\r\n  removeTask: (taskId: string) => void\r\n  changeTaskStatus: (taskId: string, status: TaskStatuses) => void\r\n  changeTaskTitle: (taskId: string, newTitle: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n  const {title, id, status, entityTaskStatus, removeTask, changeTaskStatus, changeTaskTitle} = props\r\n  \r\n  const onCheckedHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    changeTaskStatus(id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)\r\n  }, [changeTaskStatus, id])\r\n  const deleteTask = useCallback(() => {\r\n    removeTask(id)\r\n  }, [removeTask, id])\r\n  const editTitle = useCallback((newTitle: string) => {\r\n    changeTaskTitle(id, newTitle)\r\n  }, [changeTaskTitle, id])\r\n  \r\n  return (\r\n    <Grid\r\n      key={props.key}\r\n      style={{\r\n        minWidth: '200px',\r\n        maxWidth: '300px',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n      }}\r\n    >\r\n      <Checkbox\r\n        color={'primary'}\r\n        onChange={onCheckedHandler}\r\n        checked={status !== TaskStatuses.New}\r\n        disabled={entityTaskStatus === 'loading'}\r\n      />\r\n      <EditableSpan\r\n        title={title}\r\n        editTitle={editTitle}\r\n        status={status}\r\n        entityStatus={entityTaskStatus}\r\n        disabled={entityTaskStatus === 'loading'}\r\n      />\r\n      <IconButton onClick={deleteTask} disabled={entityTaskStatus === 'loading'}>\r\n        <Delete/>\r\n      </IconButton>\r\n    </Grid>\r\n  )\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { Box, Button, Grid, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { RootStateType } from '../../../app/store'\r\nimport { changeTodolistFilterAC } from '../../todolist-reducer'\r\nimport { addTaskTC, deleteTaskTC, fetchTasksTC, TasksListType, updateTaskTC } from '../../tasks-reducer'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { Task } from './Task/Task'\r\nimport { FilterType, TaskStatuses } from '../../../api/todolist-api'\r\nimport { RequestStatusType } from '../../../app/app-reducer'\r\n\r\nexport const TodoList = React.memo((props: TodoListPropsType) => {\r\n  const {id, filter, title, entityStatus, changeTodolistTitle, deleteTodolist, demo} = props\r\n  const tasks = useSelector<RootStateType, TasksListType>(state => state.tasks)\r\n  const dispatch = useDispatch()\r\n  \r\n  useEffect(() => {\r\n    if (demo) return\r\n    dispatch(fetchTasksTC(id))\r\n  }, [dispatch])\r\n  \r\n  // functions for tasks\r\n  const removeTask = useCallback((taskId: string) => {\r\n    dispatch(deleteTaskTC(id, taskId))\r\n  }, [dispatch, id])\r\n  const addTask = useCallback((title: string) => {\r\n    dispatch(addTaskTC(id, title))\r\n  }, [dispatch, id])\r\n  const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses) => {\r\n    const action = updateTaskTC(id, taskId, {status})\r\n    dispatch(action)\r\n  }, [dispatch, id])\r\n  const changeTaskTitle = useCallback((taskId: string, newTitle: string) => {\r\n    const action = updateTaskTC(id, taskId, {title: newTitle})\r\n    dispatch(action)\r\n  }, [dispatch, id])\r\n  const changeFilter = (value: FilterType) => {\r\n    const action = changeTodolistFilterAC(id, value)\r\n    dispatch(action)\r\n  }\r\n  \r\n  const deleteTodolistHandler = () => {\r\n    deleteTodolist(id)\r\n  }\r\n  const editTodolistTitle = useCallback((newTitle: string) => {\r\n    changeTodolistTitle(id, newTitle)\r\n  }, [changeTodolistTitle, id])\r\n  \r\n  let allTodolistTasks = tasks[id]\r\n  let tasksForTodoList = allTodolistTasks\r\n  \r\n  switch (filter) {\r\n    case 'active':\r\n      tasksForTodoList = allTodolistTasks.filter(t => t.status === TaskStatuses.New)\r\n      break\r\n    case 'completed':\r\n      tasksForTodoList = allTodolistTasks.filter(t => t.status === TaskStatuses.Completed)\r\n  }\r\n  \r\n  const showAllTasks = () => changeFilter('all')\r\n  const showActiveTasks = () => changeFilter('active')\r\n  const showCompletedTasks = () => changeFilter('completed')\r\n  \r\n  return (\r\n    <Box style={{textAlign: 'center'}}>\r\n      <h3 style={{\r\n        maxWidth: '300px',\r\n        textAlign: 'center',\r\n      }}>\r\n        <EditableSpan\r\n          title={title}\r\n          editTitle={editTodolistTitle}\r\n          disabled={entityStatus === 'loading'}\r\n          entityStatus={entityStatus}\r\n        />\r\n        <IconButton onClick={deleteTodolistHandler} disabled={entityStatus === 'loading'}>\r\n          <Delete/>\r\n        </IconButton>\r\n      </h3>\r\n      <Grid>\r\n        <Button\r\n          variant={filter === 'all' ? 'contained' : 'outlined'}\r\n          color={'primary'}\r\n          style={{margin: '5px'}}\r\n          onClick={showAllTasks}>all\r\n        </Button>\r\n        <Button\r\n          variant={filter === 'active' ? 'contained' : 'outlined'}\r\n          color={'primary'}\r\n          style={{margin: '5px'}}\r\n          onClick={showActiveTasks}>\r\n          active\r\n        </Button>\r\n        <Button\r\n          variant={filter === 'completed' ? 'contained' : 'outlined'}\r\n          color={'primary'}\r\n          style={{margin: '5px'}}\r\n          onClick={showCompletedTasks}>completed\r\n        </Button>\r\n      </Grid>\r\n      <Box style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n      }}>\r\n        <AddItemForm title={'Create new task'} addItem={addTask} disabled={entityStatus === 'loading'}/>\r\n      </Box>\r\n      <Box>\r\n        {tasksForTodoList.map(v =>\r\n          <Task\r\n            key={v.id}\r\n            id={v.id}\r\n            title={v.title}\r\n            status={v.status}\r\n            // entityStatus={entityStatus}\r\n            entityTaskStatus={v.entityTaskStatus}\r\n            removeTask={removeTask}\r\n            changeTaskStatus={changeTaskStatus}\r\n            changeTaskTitle={changeTaskTitle}\r\n          />)\r\n        }\r\n      </Box>\r\n    </Box>\r\n  )\r\n})\r\n\r\n// types\r\nexport type TodoListPropsType = {\r\n  demo?: boolean\r\n  id: string\r\n  title: string\r\n  filter: string\r\n  entityStatus: RequestStatusType\r\n  deleteTodolist: (todolistId: string) => void\r\n  changeTodolistTitle: (todolistId: string, newTitle: string) => void\r\n}","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { RootStateType } from '../../app/store'\r\nimport { TodolistType } from '../../api/todolist-api'\r\nimport { deleteTodolistTC, fetchTodolistTC, postTodolistTC, updateTodolistTC } from '../todolist-reducer'\r\nimport { Grid, Paper } from '@material-ui/core'\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { TodoList } from './TodoList/TodoList'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n  demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n  const todolists = useSelector<RootStateType, TodolistType[]>(state => state.todolists)\r\n  const isLoggedIn = useSelector<RootStateType, boolean>(state => state.auth.isLoggedIn)\r\n  const dispatch = useDispatch()\r\n  \r\n  useEffect(() => {\r\n    if (demo || !isLoggedIn) return\r\n    dispatch(fetchTodolistTC())\r\n  }, [dispatch, isLoggedIn,demo])\r\n  \r\n  // functions for todolist\r\n  const addTodolist = useCallback((title: string) => {\r\n    dispatch(postTodolistTC(title))\r\n  }, [dispatch])\r\n  const deleteTodolist = useCallback((todolistId: string) => {\r\n    dispatch(deleteTodolistTC(todolistId))\r\n  }, [dispatch])\r\n  const changeTodolistTitle = useCallback((todolistId: string, newTitle: string) => {\r\n    dispatch(updateTodolistTC(todolistId, newTitle))\r\n  }, [dispatch])\r\n  \r\n  if (!isLoggedIn) return <Redirect to={'login'}/>\r\n  \r\n  return (\r\n    <>\r\n      <Grid container style={{padding: '20px'}}>\r\n        <AddItemForm title={'Create new todolist'} addItem={addTodolist}/>\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        {todolists.map(tl => {\r\n            return <Grid item>\r\n              <Paper style={{\r\n                padding: '10px',\r\n                minWidth: '300px',\r\n              }}>\r\n                <TodoList\r\n                  demo={demo}\r\n                  key={tl.id}\r\n                  id={tl.id}\r\n                  title={tl.title}\r\n                  filter={tl.filter}\r\n                  entityStatus={tl.entityStatus}\r\n                  deleteTodolist={deleteTodolist}\r\n                  changeTodolistTitle={changeTodolistTitle}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n          },\r\n        )}\r\n      </Grid>\r\n    </>\r\n  )\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { RootStateType } from '../../app/store'\r\nimport { setAppErrorAC } from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n  const error = useSelector<RootStateType, string | null>(state => state.app.error)\r\n  const dispatch = useDispatch()\r\n  \r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return\r\n    }\r\n    dispatch(setAppErrorAC(null))\r\n  }\r\n  \r\n  return (\r\n    <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n      <Alert onClose={handleClose} severity=\"error\">\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport {\r\n  Checkbox,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  FormLabel,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n} from '@material-ui/core'\r\nimport { useFormik } from 'formik'\r\nimport { loginUserTC } from './auth-reducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { RootStateType } from '../../app/store'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype FormikErrorType = {\r\n  email?: string\r\n  password?: string\r\n  rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n  const isLoggedIn = useSelector<RootStateType, boolean>(state => state.auth.isLoggedIn)\r\n  const dispatch = useDispatch()\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false,\r\n    },\r\n    validate: (values) => {\r\n      const errors: FormikErrorType = {}\r\n      if (!values.email) {\r\n        errors.email = 'Required'\r\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address'\r\n      }\r\n      if (!values.password) {\r\n        errors.password = 'Required'\r\n      } else if (!/^[A-Z0-9._%+-]{2,}$/i.test(values.password)) {\r\n        errors.password = 'Invalid password'\r\n      }\r\n      return errors\r\n    },\r\n    onSubmit: values => {\r\n      dispatch(loginUserTC(values))\r\n      formik.resetForm()\r\n    },\r\n  })\r\n  if (isLoggedIn) return <Redirect to={'/'}/>\r\n  return <Grid container justify=\"center\">\r\n    <Grid item xs={4}>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <FormControl>\r\n          <FormLabel>\r\n            <p>To log in get registered\r\n              <a href=\"https://social-network.samuraijs.com/\"\r\n                 target=\"_blank\">here\r\n              </a>\r\n            </p>\r\n            <p>or use common test account credentials:</p>\r\n            <p>Email: free@samuraijs.com</p>\r\n            <p>Password: free</p>\r\n          </FormLabel>\r\n          <FormGroup>\r\n            <TextField\r\n              label=\"Email\"\r\n              margin=\"normal\"\r\n              {...formik.getFieldProps('email')}\r\n            />\r\n            {\r\n              formik.touched.email &&\r\n              formik.errors.email &&\r\n              <div style={{color: 'red'}}>\r\n                {formik.errors.email}\r\n              </div>\r\n            }\r\n            <TextField\r\n              type=\"password\"\r\n              label=\"Password\"\r\n              margin=\"normal\"\r\n              {...formik.getFieldProps('password')}\r\n            \r\n            />\r\n            {\r\n              formik.touched.password &&\r\n              formik.errors.password &&\r\n              <div style={{color: 'red'}}>\r\n                {formik.errors.password}\r\n              </div>\r\n            }\r\n            <FormControlLabel\r\n              label={'Remember me'}\r\n              control={\r\n                <Checkbox\r\n                  {...formik.getFieldProps('rememberMe')}\r\n                  checked={formik.values.rememberMe}/>\r\n              }\r\n            />\r\n            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n          </FormGroup>\r\n        </FormControl>\r\n      </form>\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","import React from 'react'\r\nimport s from './Error404.module.css'\r\n\r\nexport const Error404 = () => {\r\n  return (\r\n    <div className={s.container}>\r\n      <div className={s.number}>404</div>\r\n      <div className={s.text}>Page not found!</div>\r\n      <div className={s.smile}>—ฅ/ᐠ.̫ .ᐟ\\ฅ—</div>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport './App.css'\r\nimport {\r\n  AppBar,\r\n  Button,\r\n  CircularProgress,\r\n  Container,\r\n  createStyles,\r\n  LinearProgress,\r\n  makeStyles,\r\n  Theme,\r\n  Toolbar,\r\n} from '@material-ui/core'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { RootStateType } from './store'\r\nimport { RequestStatusType, setAppInitializedTC } from './app-reducer'\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport { Redirect, Route, Switch } from 'react-router-dom'\r\nimport { Login } from '../features/Login/Login'\r\nimport { logoutUserTC } from '../features/Login/auth-reducer'\r\nimport { Error404 } from '../components/Error404/Error404'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  }),\r\n)\r\n\r\ntype PropsType = {\r\n  demo?: boolean\r\n}\r\n\r\nexport const App = ({demo = false}: PropsType) => {\r\n  const classes = useStyles()\r\n  const status = useSelector<RootStateType, RequestStatusType>(state => state.app.status)\r\n  const isInitialized = useSelector<RootStateType, boolean>(state => state.app.isInitialized)\r\n  const isLoggedIn = useSelector<RootStateType, boolean>(state => state.auth.isLoggedIn)\r\n  const dispatch = useDispatch()\r\n  \r\n  useEffect(() => {\r\n    dispatch(setAppInitializedTC())\r\n  }, [dispatch])\r\n  \r\n  const logout = useCallback(() => {\r\n    dispatch(logoutUserTC())\r\n  }, [dispatch])\r\n  \r\n  if (!isInitialized) {\r\n    return <div\r\n      style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n      <CircularProgress/>\r\n    </div>\r\n  }\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorSnackbar/>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <h2>Create your todo</h2>\r\n          {isLoggedIn &&\r\n          <Button style={{position: 'absolute', right: '20px'}} color=\"inherit\" onClick={logout}>Logout</Button>}\r\n        </Toolbar>\r\n        {status === 'loading' && <LinearProgress/>}\r\n      </AppBar>\r\n      <Container fixed>\r\n        <Switch>\r\n          <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n          <Route exact path={'/login'} render={() => <Login/>}/>\r\n          <Route path={'/Error404'} render={() => <Error404/>}/>\r\n          <Redirect from={'*'} to={'/'}/>\r\n        </Switch>\r\n      </Container>\r\n    </div>\r\n  )\r\n}","import { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { tasksReducer } from '../features/tasks-reducer'\r\nimport { todolistReducer } from '../features/todolist-reducer'\r\nimport { appReducer } from './app-reducer'\r\nimport { authReducer } from '../features/Login/auth-reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  todolists: todolistReducer,\r\n  tasks: tasksReducer,\r\n  app: appReducer,\r\n  auth: authReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { App } from './app/App'\r\nimport { Provider } from 'react-redux'\r\nimport { store } from './app/store'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App/>\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Error404_container__iZOsP\",\"number\":\"Error404_number__1XLr-\",\"text\":\"Error404_text__pzOeC\",\"smile\":\"Error404_smile__2Nthg\"};"],"sourceRoot":""}