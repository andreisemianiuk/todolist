{"version":3,"sources":["TodoList/TodoList.module.css","AddItemForm/AddItemForm.module.css","TodoListTask/TodoListTask.module.css","EditableSpan/EditableSpan.module.css","EditableSpan/EditableSpan.tsx","TodoListTask/TodoListTask.tsx","AddItemForm/AddItemForm.tsx","TodoList/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","EditableSpan","title","editTitle","isDone","useState","editMode","setEditMode","value","setValue","taskCompleted","s","selected","className","input","autoFocus","onChange","e","currentTarget","onBlur","onDoubleClick","text","TodoListTask","props","key","styles","item","label","checkbox","type","changeChecked","id","checked","todolistId","newTitle","changeTaskTitle","btnContainer","span","onClick","removeTask","AddItemForm","setTitle","error","setError","addItem","trim","main","placeholder","onKeyPress","addBtn","errorWrapper","errorMessage","TodoList","container","changeTodolistTitle","btnWrapper","titleBtn","deleteTodolist","formContainer","addTask","filter","btn","changeFilter","tasks","map","v","App","todolists","setTodolists","setTasks","task","v1","todoId","find","todolist","tl","targetTodolist","t","taskId","targetTask","TodoListId","allTodolistsTasks","tasksForTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3bef078b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TodoList_container__jh5k5\",\"title\":\"TodoList_title__3Wzs4\",\"btnWrapper\":\"TodoList_btnWrapper__2TgUc\",\"titleBtn\":\"TodoList_titleBtn__1I_8D\",\"formContainer\":\"TodoList_formContainer__9Abx5\",\"btn\":\"TodoList_btn__1e3c4\",\"selected\":\"TodoList_selected__2TSX6\",\"glowing\":\"TodoList_glowing__2wdO0\",\"filter\":\"TodoList_filter__1a1j9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"AddItemForm_main__3aSK9\",\"input\":\"AddItemForm_input__3jfJJ\",\"addBtn\":\"AddItemForm_addBtn__14xMj\",\"glowing\":\"AddItemForm_glowing__iEcxA\",\"error\":\"AddItemForm_error__5qbYd\",\"errorWrapper\":\"AddItemForm_errorWrapper__2C1KW\",\"errorMessage\":\"AddItemForm_errorMessage__dY6zR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"TodoListTask_item__2lF31\",\"label\":\"TodoListTask_label__7jE84\",\"checkbox\":\"TodoListTask_checkbox__1h7jy\",\"btnContainer\":\"TodoListTask_btnContainer__2WNxB\",\"span\":\"TodoListTask_span__BamPx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"EditableSpan_input__12Iyi\",\"text\":\"EditableSpan_text__F0Qlf\",\"selected\":\"EditableSpan_selected__1L7KZ\"};","import React, { ChangeEvent, useState } from 'react'\r\nimport s from './EditableSpan.module.css'\r\n\r\ntype EditableSpanType = {\r\n  title: string\r\n  editTitle: (newTitle: string) => void\r\n  isDone?: boolean\r\n}\r\nexport const EditableSpan = ({title, editTitle, isDone}: EditableSpanType) => {\r\n  const [editMode, setEditMode] = useState(false)\r\n  const [value, setValue] = useState('')\r\n  \r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setValue(e.currentTarget.value)\r\n  }\r\n  \r\n  const editModeHandler = () => {\r\n    setEditMode(true)\r\n  }\r\n  \r\n  const editItemTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setValue(e.currentTarget.value)\r\n    editTitle(value)\r\n    setEditMode(false)\r\n  }\r\n  \r\n  const taskCompleted = isDone ? s.selected : ''\r\n  \r\n  return (\r\n    <>\r\n      {editMode ?\r\n        <input className={s.input} autoFocus value={value} onChange={onChangeHandler} onBlur={editItemTitle}/>\r\n        : <span onDoubleClick={editModeHandler} className={`${s.text} ${taskCompleted}`}>{title}</span>}\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n","import React, { ChangeEvent } from 'react'\r\nimport styles from './TodoListTask.module.css'\r\nimport { EditableSpan } from '../EditableSpan/EditableSpan'\r\n\r\ntype TodoListTaskPropsType = {\r\n  todolistId: string\r\n  title: string\r\n  key: string\r\n  id: string\r\n  isDone: boolean\r\n  removeTask: (id: string, todolistId: string) => void\r\n  changeChecked: (id: string, isDone: boolean, todolistId: string) => void\r\n  changeTaskTitle: (todolistId: string,taskId: string, newTitle: string) => void\r\n}\r\n\r\nfunction TodoListTask(props: TodoListTaskPropsType) {\r\n  \r\n  const onCheckedHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    props.changeChecked(props.id, e.currentTarget.checked, props.todolistId)\r\n  }\r\n  \r\n  const removeTask = () => {\r\n    props.removeTask(props.id, props.todolistId)\r\n  }\r\n  \r\n  const editTitle = (newTitle:string) => {\r\n    props.changeTaskTitle(props.todolistId,props.id,newTitle)\r\n  }\r\n  \r\n  return (\r\n    <div key={props.key}>\r\n\t\t\t<span className={styles.item}>\r\n\t\t\t\t<label className={styles.label}>\r\n          <input className={styles.checkbox} type=\"checkbox\" onChange={onCheckedHandler} checked={props.isDone}/>\r\n        </label>\r\n        <EditableSpan title={props.title} editTitle={editTitle} isDone={props.isDone} />\r\n        <div className={styles.btnContainer}><button className={styles.span} onClick={removeTask}/></div>\r\n\t\t\t</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoListTask","import React, { ChangeEvent, KeyboardEvent, useState } from 'react'\r\nimport styles from './AddItemForm.module.css'\r\n\r\ntype AddItemFormType = {\r\n  addItem: (title: string) => void\r\n  title?: string\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormType) => {\r\n  const [title, setTitle] = useState<string>('')\r\n  const [error, setError] = useState<string | null>(null)\r\n  \r\n  const addItem = () => {\r\n    if (title.trim()) {\r\n      props.addItem(title)\r\n      setTitle('')\r\n    } else {\r\n      setError('Title is required!')\r\n      setTitle('')\r\n    }\r\n  }\r\n  \r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n    setError(null)\r\n  }\r\n  \r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      addItem()\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className={styles.main}>\r\n      <input\r\n        placeholder={props.title}\r\n        className={`${styles.input} ${error ? styles.error : ''}`}\r\n        value={title}\r\n        onChange={onChangeHandler}\r\n        onKeyPress={onKeyPressHandler}\r\n        onBlur={() => setError('')}\r\n      />\r\n      <button className={styles.addBtn} onClick={addItem}>Add</button>\r\n      <div className={styles.errorWrapper}>\r\n        {error && <div className={styles.errorMessage}>{error}</div>}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport { FilterType, TaskType } from '../App'\r\nimport TodoListTask from '../TodoListTask/TodoListTask'\r\nimport styles from './TodoList.module.css'\r\nimport { AddItemForm } from '../AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../EditableSpan/EditableSpan'\r\n\r\ntype TodoListPropsType = {\r\n  id: string\r\n  title: string\r\n  filter: string\r\n  tasks: TaskType[]\r\n  addTask: (title: string, todolistId: string) => void\r\n  removeTask: (taskId: string, todolistId: string) => void\r\n  changeChecked: (id: string, isDone: boolean, todolistId: string) => void\r\n  changeFilter: (value: FilterType, todolistId: string) => void\r\n  deleteTodolist: (todolistId: string) => void\r\n  changeTodolistTitle: (todolistId: string, newTitle: string) => void\r\n  changeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n  const addTask = (title: string) => {\r\n    props.addTask(title, props.id)\r\n  }\r\n  \r\n  const deleteTodolist = () => {\r\n    props.deleteTodolist(props.id)\r\n  }\r\n  \r\n  const editTodolistTitle = (newTitle: string) => {\r\n    props.changeTodolistTitle(props.id, newTitle)\r\n  }\r\n  \r\n  const showAllTasks = () => props.changeFilter('all', props.id)\r\n  const showActiveTasks = () => props.changeFilter('active', props.id)\r\n  const showCompletedTasks = () => props.changeFilter('completed', props.id)\r\n  \r\n  return (\r\n    <div className={styles.container}>\r\n      <h3 className={styles.title}>\r\n        <EditableSpan title={props.title} editTitle={editTodolistTitle}/>\r\n        <span className={styles.btnWrapper}>\r\n          <button className={styles.titleBtn} onClick={deleteTodolist} />\r\n        </span>\r\n      </h3>\r\n      <div className={styles.formContainer}>\r\n        <AddItemForm title={'Create new task'} addItem={addTask}/>\r\n      </div>\r\n      \r\n      <div className={styles.filter}>\r\n        <button className={props.filter !== 'all' ? styles.selected : styles.btn} onClick={showAllTasks}>all\r\n        </button>\r\n        <button className={props.filter !== 'active' ? styles.selected : styles.btn}\r\n                onClick={showActiveTasks}>active\r\n        </button>\r\n        <button className={props.filter !== 'completed' ? styles.selected : styles.btn}\r\n                onClick={showCompletedTasks}>completed\r\n        </button>\r\n      </div>\r\n      <div>\r\n        {props.tasks.map(v =>\r\n          <TodoListTask key={v.id}\r\n                        id={v.id}\r\n                        todolistId={props.id}\r\n                        title={v.title}\r\n                        isDone={v.isDone}\r\n                        removeTask={props.removeTask}\r\n                        changeChecked={props.changeChecked}\r\n                        changeTaskTitle={props.changeTaskTitle}\r\n          />)\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoList","import React, { useState } from 'react'\r\nimport './App.css'\r\nimport TodoList from './TodoList/TodoList'\r\nimport { v1 } from 'uuid'\r\nimport { AddItemForm } from './AddItemForm/AddItemForm'\r\n\r\nexport type TaskType = {\r\n  title: string\r\n  id: string\r\n  isDone: boolean\r\n}\r\n\r\nexport type TasksListType = {\r\n  [key: string]: TaskType[]\r\n}\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodolistsType = {\r\n  id: string\r\n  title: string\r\n  filter: FilterType\r\n}\r\n\r\nfunction App() {\r\n  \r\n  let [todolists, setTodolists] = useState<TodolistsType[]>([])\r\n  let [tasks, setTasks] = useState<TasksListType>({})\r\n  \r\n  const addTask = (title: string, todolistId: string) => {\r\n    const task = {\r\n      id: v1(),\r\n      title: title,\r\n      isDone: false,\r\n    }\r\n    tasks[todolistId] = [task, ...tasks[todolistId]]\r\n    setTasks({...tasks})\r\n  }\r\n  const addTodolist = (title: string) => {\r\n    const TodoListId = v1()\r\n    const todolist: TodolistsType = {\r\n      id: TodoListId,\r\n      title: title,\r\n      filter: 'all',\r\n    }\r\n    setTodolists([todolist, ...todolists])\r\n    tasks[TodoListId] = []\r\n    setTasks({...tasks})\r\n  }\r\n  \r\n  const removeTask = (todoId: string, todolistId: string) => {\r\n    tasks[todolistId] = tasks[todolistId].filter(v => v.id !== todoId)\r\n    setTasks({...tasks})\r\n  }\r\n  \r\n  const changeChecked = (todoId: string, isDone: boolean, todolistId: string) => {\r\n    let task = tasks[todolistId].find(v => v.id === todoId)\r\n    if (task) {\r\n      task.isDone = isDone\r\n      setTasks({...tasks})\r\n    }\r\n  }\r\n  \r\n  const changeFilter = (value: FilterType, todolistId: string) => {\r\n    let todolist = todolists.find(v => v.id === todolistId)\r\n    if (todolist) {\r\n      todolist.filter = value\r\n    }\r\n    setTodolists([...todolists])\r\n  }\r\n  \r\n  const deleteTodolist = (todolistId: string) => {\r\n    todolists = todolists.filter(tl => tl.id !== todolistId)\r\n    setTodolists(todolists)\r\n    delete tasks[todolistId]\r\n    setTasks({...tasks})\r\n  }\r\n  \r\n  const changeTodolistTitle = (todolistId: string, newTitle: string) => {\r\n    const targetTodolist = todolists.find(t => t.id === todolistId)\r\n    if (targetTodolist) {\r\n      targetTodolist.title = newTitle\r\n    }\r\n    setTodolists([...todolists])\r\n  }\r\n  \r\n  const changeTaskTitle = (todolistId: string, taskId: string, newTitle: string) => {\r\n    const targetTask = tasks[todolistId].find(t => t.id === taskId)\r\n    if (targetTask) {\r\n      targetTask.title = newTitle\r\n    }\r\n    setTasks({...tasks})\r\n  }\r\n  \r\n  return (\r\n    <div className='App'>\r\n      <AddItemForm title={'Create new todolist'} addItem={addTodolist}/>\r\n      {todolists.map(tl => {\r\n          let allTodolistsTasks = tasks[tl.id]\r\n          let tasksForTodoList = allTodolistsTasks\r\n          \r\n          switch (tl.filter) {\r\n            case 'active':\r\n              tasksForTodoList = allTodolistsTasks.filter(t => !t.isDone)\r\n              break\r\n            case 'completed':\r\n              tasksForTodoList = allTodolistsTasks.filter(t => t.isDone)\r\n          }\r\n          return <TodoList\r\n            key={tl.id}\r\n            id={tl.id}\r\n            title={tl.title}\r\n            tasks={tasksForTodoList}\r\n            filter={tl.filter}\r\n            addTask={addTask}\r\n            removeTask={removeTask}\r\n            changeChecked={changeChecked}\r\n            changeFilter={changeFilter}\r\n            deleteTodolist={deleteTodolist}\r\n            changeTodolistTitle={changeTodolistTitle}\r\n            changeTaskTitle={changeTaskTitle}\r\n          />\r\n        },\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}